lifecycle feature
class based component 
functon based component

Hooks in React are functions that allow you to "hook 
into" React state and lifecycle features from function 
components.

In React, a side effect is any operation that affects something outside the function/component being executed. Side effects can include:

Fetching data from an API
Manipulating the DOM directly
Setting up event listeners
Modifying global state or browser storage (like localStorage or sessionStorage)
Setting timeouts or intervals

web scrappers
babel

memoization
It means remembering some output given an input and not computing it again

In React, useCallback is a hook that returns a memoized version of a function, preventing it from being recreated on every render unless its dependencies change.

Definition:
useCallback(fn, deps) is a React Hook that caches a function and returns the same function reference until one of its dependencies (deps) changes.

Custom hooks
Just like useState, useEffect, you can write your own hooks
Only condition is - It should start with a use (naming convention)

pureComponent

